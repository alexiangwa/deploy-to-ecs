name: deploy to ecs
on:
    push:
        branches:
            main
    workflow_dispatch:

jobs:
   builddeploytoecs:
      runs-on: ubuntu-latest
      permissions :
        contents: read
        packages: write
      steps:
        - name: checkout clone from repo
          uses: actions/checkout@v3
        - name: set up java and maven
          uses: actions/setup-java@v3
          with:
             distribution: 'adopt'
             java-version: '11'

        - name: package with maven
          run: mvn package
          #make sure u update the url with the pub ip incase u stop and start your sonarqube server
        # - name: code analysis with sonarqube 
        #   run:  mvn sonar:sonar -Dsonar.projectKey=xashywebapp -Dsonar.host.url=${{secrets.SONAR_HOST_URL}} -Dsonar.token=${{secrets.SONAR_LOGIN_TOKEN}}
        - name: upload artifact to github packages
          run: mvn --batch-mode deploy
          env:
            GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
       
        - name: authenticate in aws env
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
            aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
            aws-region: ${{secrets.AWS_REGION}}
       # this step permits you to github actions to login to ecr
        - name: login to ecr
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
          ## containerise artifact with maven tag and push to ecr repo
        - name: build, tag and push 
          id: build-image
          env:
            REGISTRY: ${{steps.login-ecr.outputs.registry}}
            REPOSITORY: ecs-deploy
            IMAGE_TAG: ${{github.sha}} # context that specifies the commit id that triggered your workflow
          run: |
             docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
             docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
             echo "image=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >>GITHUB_OUTPUT
          ## github action should create a new task definition 
        - name: Fill in the new image ID in the Amazon ECS task definition
          id: task-def
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: task-definition.json
            container-name: ecs-webapp #anyname
            image: ${{ steps.build-image.outputs.image }}
    ## github  action should update the service with the latest task-definition revision and also change the nale of the service and cluster
        - name: Deploy Amazon ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: service-deploy
            cluster: ecs-cluster
            wait-for-service-stability: true